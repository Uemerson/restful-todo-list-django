version: '3.8'

services:
  api:
    container_name: todolist_api
    build:
      context: .
      dockerfile: Dockerfile.dev
    command: python api/manage.py runserver 0.0.0.0:${API_PORT:-8000}
    volumes:
      - .:/app/
    ports:
      - "${API_PORT:-8000}:8000"
    env_file:
      - ./.env.dev
    networks:
      - local_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  postgres:
    container_name: todolist_postgres
    image: postgres:13-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-postgres}
    volumes:
      - postgres:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - local_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    container_name: todolist_redis
    image: redis:7.2.4-alpine
    restart: always
    ports:
      - '6379:6379'
    volumes: 
      - redis:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1s
      timeout: 3s
      retries: 30
    networks:
      - local_network

networks:
  local_network:
    driver: bridge


volumes:
    postgres:
    redis: